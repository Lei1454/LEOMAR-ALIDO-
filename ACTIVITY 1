 #include <WiFi.h>
#include <WebServer.h>

const char* networkName = "Lei-Lei";
const char* networkPassword = "leileileilei";

const int lampPins[] = {23, 22, 21, 13, 12};
const int lampCount = sizeof(lampPins) / sizeof(lampPins[0]);

WebServer webService(80);

struct LampController {
    bool toggleMode = false;
    bool modeA = true;
    unsigned long lastToggle = 0;
    const unsigned long toggleDelay = 300;
   
    bool sequenceActive = false;
    unsigned long lastSequence = 0;
    const unsigned long sequenceDelay = 300;
    int stepIndex = 0;
    int direction = 1;
    const int sequenceOrder[5] = {5, 17, 16, 18, 19};
    const int totalSteps = 5;
} lampControl;

void initializeWiFi() {
    WiFi.begin(networkName, networkPassword);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.println("Attempting WiFi Connection...");
    }
    Serial.println("Connected to Network: " + WiFi.localIP().toString());
}

void configureLamps() {
    for (int i = 0; i < lampCount; i++) {
        pinMode(lampPins[i], OUTPUT);
        digitalWrite(lampPins[i], LOW);
    }
}

void switchLamps(int state) {
    for (int i = 0; i < lampCount; i++) {
        digitalWrite(lampPins[i], state);
    }
}

void mainPage() {
    webService.send(200, "text/html", "<!DOCTYPE html><html><head><title>ESP32 Lamp Control</title></head><body>"
                               "<h1>ESP32 Lamp Control</h1>"
                               "<button onclick=\"fetch('/deactivate')\">Turn Lamps OFF</button><br>"
                               "<button onclick=\"fetch('/activate')\">Turn ALL Lamps ON</button><br>"
                               "<button onclick=\"fetch('/toggle')\">Toggle Lamps</button><br>"
                               "<button onclick=\"fetch('/sequence')\">Sequence Mode</button><br>"
                               "</body></html>");
}

void deactivateLamps() {
    lampControl.toggleMode = false;
    lampControl.sequenceActive = false;
    switchLamps(LOW);
    webService.send(200, "text/plain", "Lamps are OFF");
}

void activateLamps() {
    lampControl.toggleMode = false;
    lampControl.sequenceActive = false;
    switchLamps(HIGH);
    webService.send(200, "text/plain", "All Lamps are ON");
}

void startToggleMode() {
    lampControl.toggleMode = true;
    lampControl.sequenceActive = false;
    lampControl.lastToggle = millis();
    lampControl.modeA = true;
    webService.send(200, "text/plain", "Toggle Mode Activated");
}

void startSequenceMode() {
    lampControl.sequenceActive = true;
    lampControl.toggleMode = false;
    lampControl.lastSequence = millis();
    lampControl.stepIndex = 0;
    lampControl.direction = 1;
    webService.send(200, "text/plain", "Sequence Mode Activated");
}

void setup() {
    Serial.begin(115200);
    initializeWiFi();
    configureLamps();
   
    webService.on("/", mainPage);
    webService.on("/deactivate", deactivateLamps);
    webService.on("/activate", activateLamps);
    webService.on("/toggle", startToggleMode);
    webService.on("/sequence", startSequenceMode);
   
    webService.begin();
    Serial.println("Web Server is Online");
}

void loop() {
    webService.handleClient();
    unsigned long currentMillis = millis();
   
    if (lampControl.toggleMode && (currentMillis - lampControl.lastToggle >= lampControl.toggleDelay)) {
        lampControl.lastToggle = currentMillis;
        for (int i = 0; i < lampCount; i++) {
            digitalWrite(lampPins[i], (lampControl.modeA ? (i % 2 == 0) : (i % 2 != 0)) ? HIGH : LOW);
        }
        lampControl.modeA = !lampControl.modeA;
    }
   
    if (lampControl.sequenceActive && (currentMillis - lampControl.lastSequence >= lampControl.sequenceDelay)) {
        lampControl.lastSequence = currentMillis;
        switchLamps(LOW);
        digitalWrite(lampControl.sequenceOrder[lampControl.stepIndex], HIGH);
        lampControl.stepIndex += lampControl.direction;
        if (lampControl.stepIndex== lampControl.totalSteps - 1 || lampControl.stepIndex == 0) {
            lampControl.direction *= -1;
        }
    }
}
